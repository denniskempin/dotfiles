#!/bin/bash
set -e
cd "$(dirname "$0")"

################################################################################
# Common

# Packages with identical names on homebrew/arch/debian
COMMON_PACKAGES=(
  fish
  neovim
  thefuck # Corrects common command mistakes (e.g. prepending sudo)
  tldr    # tldr versins of man pages
  bat     # better cat
  zoxide  # better cd (with fuzzy matching and autojump)
  exa     # better ls
)

# Packages with identical names on homebrew/arch
ARCH_BREW_PACKAGES=(
    "${COMMON_PACKAGES[@]}"
    grc       # generic colorizer for standard commands
    fd        # better find
    less      # Newer version has --mouse support
    git-delta # Better git diff
    sd        # Better sed
    ripgrep   # Better grep
    procs     # Better ps
    bottom    # Better top
    fzf       # fuzzy finder
)

setup_fish() {
  # Link config files
  mkdir -p ~/.config/fish/
  ln -sf "$(pwd)/fish/config.fish" ~/.config/fish/config.fish
  ln -sf "$(pwd)/fish/fish_plugins" ~/.config/fish/fish_plugins
  ln -sf "$(pwd)/fish/starship.toml" ~/.config/starship.toml

  # Using fish as a login shell can be problematic since it is not POSIX
  # compliant. So instead we make bash call fish for interactive shells.
  ln -sf "$(pwd)/fish/bashrc" ~/.bashrc
  ln -sf "$(pwd)/fish/bashrc" ~/.zshrc

  # Install starship prompt
  sh -c "$(curl -fsSL https://starship.rs/install.sh)" -- -y

  # Install fisher plugins
  fish -c "curl -sL https://git.io/fisher | source && fisher update"
}

setup_misc() {
  ln -sf "$(pwd)/gitconfig" ~/.gitconfig

  rm -rf ~/.config/nvim
  ln -sf "$(pwd)/nvim" ~/.config/nvim

  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim \
    --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

################################################################################
# OSX specific

setup_vscode() {
  ln -sf "$(pwd)/vscode/keybindings.json" ~/Library/Application\ Support/Code/User/keybindings.json
  ln -sf "$(pwd)/vscode/settings.json" ~/Library/Application\ Support/Code/User/settings.json
}

setup_iterm2() {
  # Tell iterm2 to use the settings file in `./iterm2`
  defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "$(pwd)/iterm2"
  defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
}

install_osx_packages() {
  brew install "${ARCH_BREW_PACKAGES[@]}"

  brew tap homebrew/cask-fonts
  brew install --cask \
    font-fira-code
}

setup_osx() {
  install_osx_packages
  setup_vscode
  setup_iterm2
  setup_fish
  setup_misc
}

################################################################################
# Linux specific

install_arch_packages() {
  pacman -Sy --noconfirm "${ARCH_BREW_PACKAGES[@]}"
}

install_deb() {
  (cd /tmp && rm -f pkg.deb && wget "$1" -o pkg.deb && dpkg -i pkg.deb)
}

install_debian_packages() {
  packages=(
    "${COMMON_PACKAGES[@]}"
    fd-find # better find
  )
  sudo apt install --yes "${packages[@]}"

  # Packages not available in repositories
  install_deb http://kassiopeia.juls.savba.sk/~garabik/software/grc/grc_1.12-1_all.deb
  install_deb https://github.com/dandavison/delta/releases/download/0.12.1/git-delta_0.12.1_amd64.deb
  install_deb https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb
  install_deb https://github.com/ClementTsang/bottom/releases/download/0.6.8/bottom_0.6.8_amd64.deb

  # No debian packages available
  cargo install sd
  cargo install procs
}

setup_linux() {
  if command -v pacman >/dev/null; then
    install_arch_packages
  fi
  if command -v apt-get >/dev/null; then
    install_debian_packages
  fi
  setup_fish
  setup_misc
}

################################################################################
# Main

main() {
  # Get sudo upfront so we don't need to ask later.
  sudo true

  case $OSTYPE in
  darwin*)
    setup_osx
    ;;
  *)
    setup_linux
    ;;
  esac
  echo "Success"
}
main
